#!/usr/bin/env node

process.chdir('/code');

var Linter = require('ember-template-lint');
var walkSync = require('walk-sync');
var fs = require('fs');
var path = require('path');
var engineConfig = JSON.parse(fs.readFileSync('/config.json').toString());
var userConfig = engineConfig.config || {};
var modulePrefix = userConfig.namespace;
var config;

try {
  config = require(process.cwd() + (userConfig.config_path || '/.template-lintrc'));
} catch (e) {
  config = userConfig.config;
}

if (config == null) {
  config = {
    extends: 'recommended'
  }
}

var linter = new Linter({
  config: config,
  console: {
    log: function () {
      console.warn.apply(console, arguments);
    }
  }
});

var dir = 'app';
if (!modulePrefix) {
  try {
    fs.accessSync('addon', fs.F_OK);
    dir = 'addon';
    modulePrefix = require(process.cwd() + '/index').name;
  } catch (e) {
    modulePrefix = require(process.cwd() + '/config/environment')('production').modulePrefix;
  }
}

var includePaths = engineConfig.include_paths || ['app/**/*.hbs', 'addon/**/*.hbs'];
includePaths = includePaths.map(function (path) {
  return path.replace(/\/$/, '/**/*');
});
var excludePaths = engineConfig.exclude_paths || [];
excludePaths = excludePaths.map(function (path) {
  return path.replace(/\/$/, '/**/*');
});

var templateFiles = walkSync('./', { globs: includePaths, ignore: excludePaths }).filter(function (file) {
  return path.extname(file) === '.hbs';
});

var SEVERITY = ['info', 'normal', 'critical'];

function getCategories(rule) {
  switch (rule) {
  case 'bare-strings':
    return ['Compatibility'];
  case 'html-comments':
    return ['Performance'];
  case 'triple-curlies':
    return ['Security'];
  case 'nested-interactive':
    return ['Bug Risk', 'Compatibility'];
  case 'image-alt-attributes':
  case 'invalid-interactive':
    return ['Compatibility'];
  case 'link-rel-noopener':
    return ['Security'];
  case 'style-concatenation':
    return ['Security', 'Style'];
  case 'deprecated-each-syntax':
  case 'deprecated-inline-view-helper':
    return ['Compatibility'];
  default:
    return ['Style'];
  }
}

templateFiles.forEach(function (file) {
  var filePath = path.join(file);
  var contents = fs.readFileSync(filePath, { encoding: 'utf8' });
  var moduleId = path.join(modulePrefix, file).slice(0, -4);

  var errors = linter.verify({
    source: contents,
    moduleId: moduleId
  });

  errors.forEach(function (error) {
    // A template failed to compile; continue
    if (error.rule == null) {
      return;
    }

    var issue = {
      type: 'issue',
      check_name: error.rule,
      description: error.message.replace(/ beginning at L\d+:C\d+/g, ''),
      categories: getCategories(error.rule),
      severity: SEVERITY[error.severity - 1],
      location: {
        path: filePath,
        positions: {
          begin: {
            line: error.line,
            column: error.column
          },
          end: {
            line: error.line,
            column: error.column
          }
        }
      }
    };

    process.stdout.write(JSON.stringify(issue) + '\0');
  });
});
