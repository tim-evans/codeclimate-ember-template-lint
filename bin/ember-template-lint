#!/usr/bin/env node

process.chdir('/code');

var Linter = require('ember-template-lint');
var walkSync = require('walk-sync');
var fs = require('fs');
var path = require('path');
var engineConfig = JSON.parse(fs.readFileSync('/config.json').toString());
var userConfig = engineConfig.config || {};
var modulePrefix = userConfig.namespace;
var categories = require('./categories');
var config;

var linter = new Linter();

// Pull documentation on each rule so we can show a more detailed
// "Read Up" on CodeClimate.
var docs = {};
Object.keys(linter.config.loadedRules).forEach(function (ruleName) {
  let documentationPath = __dirname + '/../node_modules/ember-template-lint/docs/rule/' + ruleName + '.md';
  let deprecationPath = __dirname + '/../node_modules/ember-template-lint/docs/rule/deprecations/' + ruleName + '.md';
  let documentation = '';
  try {
    documentation = fs.readFileSync(documentationPath, { encoding: 'utf8' });
  } catch (e) {
    try {
      documentation = fs.readFileSync(deprecationPath, { encoding: 'utf8' });
    } catch (e) {
      documentation = '';
    }
  }
  docs[ruleName] = documentation;
});

var dir = 'app';
if (userConfig.rules) {
  let rules = Object.keys(userConfig.rules).reduce(function (E, ruleName) {
    let value = userConfig.rules[ruleName];
    if (value === 'true') {
      E[ruleName] = true;
    } else if (value === 'false') {
      E[ruleName] = false;
    } else {
      E[ruleName] = parseInt(value, 10);
    }
    return E;
  }, {});

  config = { rules: rules };
}

if (config == null) {
  try {
    config = require(process.cwd() + (userConfig.config_path || '/.template-lintrc'));
  } catch (e) {
    config = null;
  }
}

if (config == null) {
  config = {
    extends: 'recommended'
  }
}

var linter = new Linter({
  config: config,
  console: {
    log: function () {
      console.warn.apply(console, arguments);
    }
  }
});

var dir = 'app';
if (!modulePrefix) {
  try {
    fs.accessSync('addon', fs.F_OK);
    dir = 'addon';
    modulePrefix = require(process.cwd() + '/index').name;
  } catch (e) {
    modulePrefix = require(process.cwd() + '/config/environment')('production').modulePrefix;
  }
}

var includePaths = engineConfig.include_paths || ['app/**/*.hbs', 'addon/**/*.hbs'];
includePaths = includePaths.map(function (path) {
  return path.replace(/\/$/, '/**/*');
});
var excludePaths = engineConfig.exclude_paths || [];
excludePaths = excludePaths.map(function (path) {
  return path.replace(/\/$/, '/**/*');
});

var templateFiles = walkSync('./', { globs: includePaths, ignore: excludePaths }).filter(function (file) {
  return path.extname(file) === '.hbs';
});

var SEVERITY = ['info', 'normal', 'critical'];

templateFiles.forEach(function (file) {
  var filePath = path.join(file);
  var contents = fs.readFileSync(filePath, { encoding: 'utf8' });
  var moduleId = path.join(modulePrefix, file).slice(0, -4);

  var errors = linter.verify({
    source: contents,
    moduleId: moduleId
  });

  errors.forEach(function (error) {
    // A template failed to compile; continue
    if (error.rule == null) {
      return;
    }

    var issue = {
      type: 'issue',
      check_name: error.rule,
      content: {
        body: docs[error.rule]
      },
      description: error.message.replace(/ beginning at L\d+:C\d+/g, ''),
      categories: categories[error.rule] || ['Bug Risk'],
      severity: SEVERITY[error.severity - 1],
      location: {
        path: filePath,
        positions: {
          begin: {
            line: error.line,
            column: error.column
          },
          end: {
            line: error.line,
            column: error.column
          }
        }
      }
    };

    process.stdout.write(JSON.stringify(issue) + '\0');
  });
});
